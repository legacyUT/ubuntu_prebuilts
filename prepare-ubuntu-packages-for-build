#!/bin/bash -e
#
# Copyright 2014 Canonical Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# prepare ubuntu packages for build [-c <channel_name>] [-v <version>]

SCRIPT_NAME=$(basename $0)
[ -z $DEBUG ] && DEBUG=0
# default channel
DEFAULT_CHANNEL="rc-proposed/ubuntu"
DEFAULT_SERVER_URL="http://system-image.ubuntu.com"

# set default values if not defined globaly
[ -z $UDF_SERVER_URL ] && UDF_SERVER_URL=$DEFAULT_SERVER_URL
USING_CHANNEL=$DEFAULT_CHANNEL
[ -n "$RELEASE_CHANNEL" ] && USING_CHANNEL=$RELEASE_CHANNEL
USING_DEVICE="m75"
[ -n "$DEVICE" ] && USING_DEVICE=$DEVICE
[ -z $UDF_DOWNLOAD_CACHE ] && UDF_DOWNLOAD_CACHE="$HOME/.cache/ubuntuimages"
[ -z $FORCE_DOWNLOAD ] && FORCE_DOWNLOAD=0

print_usage() {
     echo -e "Download packages needed to create flash tool images"
     echo -e "Usage:"
     echo -e "$SCRIPT_NAME [ -c <channel_name>] [ -v <release version>] [-h] [ROOTFS/CUSTOM]\n"
     echo -e "\t-h, --help                 \tthis message"
     echo -e "\t-d, --device <device name> \tchange default used device ($DEVICE) in channel"
     echo -e "\t-c, --channel <name>       \tname of the channel to be used default is set to: $DEFAULT_CHANNEL"
     echo -e "\t-v, --version <version>    \trelease version to download, default version is set to latest"
     echo -e "\t--full                     \tdownload all packages for release, inluding device one"
}

download_file() {
    [ "$DEBUG" == "1" ] && echo "download_file($1, $2)"
    DOWNLOAD_URL=$1
    FILENAME=$2
    TARGET_SIZE=$3
    SIZE=1
    # check if file should be downloaded at all
    FILE_SIZE=$(du -b $FILENAME | awk '{ print $1}') 2>/dev/null
    [ "$DEBUG" == "1" ] && echo "comparing sizes $FILE_SIZE and $TARGET_SIZE"
    if [[ ! $FORCE_DOWNLOAD == 1 ]] && [[ $FILE_SIZE -ge $TARGET_SIZE ]]; then
        echo "Skipping download of $(basename $FILENAME), already downloaded"
        return
    fi
    # check downloaded file size, this often fails, so retry. Expected size is TARGET_SIZE
    while [[ $TARGET_SIZE -gt $SIZE ]]
    do
        mkdir -p $(dirname $FILENAME)
        curl $DOWNLOAD_URL > $FILENAME
        SIZE=$(du -b $FILENAME | awk '{ print $1}')
        echo "Downloaded file has size: $SIZE"
    done
    curl $DOWNLOAD_URL.asc > $FILENAME.asc
}

download_channel() {
    CHANNEL_URL="$UDF_SERVER_URL/ubuntu-touch/$1/$2/index.json"
    echo "Selected channel: $CHANNEL_URL"
    unset VERSION_MATCH
    if [ -n "$3" ]; then
        VERSION_MATCH="and i['version'] == $3"
        [ "$DEBUG" == "1" ] && echo "Using version match:$VERSION_MATCH"
    fi
    CHANNEL_PACKAGES=$(curl -s $CHANNEL_URL | python -c "import json
import sys
data =  json.load(sys.stdin)
count = len(data['images'])
for i in reversed(data['images']):
    if i['type'] == 'full' $VERSION_MATCH:
        pCount = len(i['files'])
        for ii in range(0, pCount):
            print i['files'][ii]['size'], i['files'][ii]['path']
        break")

    if [ -z "$CHANNEL_PACKAGES" ]; then
        echo -e "\nDefined combination of channel and version was not found"
        return
    else
        echo -e "\nChannel packages:\n$CHANNEL_PACKAGES\n"
    fi
    unset DOWNLOADED_ROOTFS_PACKAGES
    unset DOWNLOADED_CUSTOM_PACKAGES
    while read -r line; do
        unset DOWNLOAD_SERVER
        SIZE=$( echo $line | awk '{ print $1}')
        PACKAGE=$(echo $line | awk '{ print $2}')
        if [[ $PACKAGE == /* ]]; then
            DOWNLOAD_SERVER=$UDF_SERVER_URL
            PACKAGE=${PACKAGE#?} # remove first "/"
        else
            # strip name to server and file path+name
            PROTO="$(echo $PACKAGE | grep :// | sed -e's,^\(.*://\).*,\1,g')"
            URL="$(echo ${PACKAGE/$PROTO/})"
            HOST="$(echo ${URL/} | cut -d/ -f1)"
            PACKAGE="$(echo $URL | grep / | cut -d/ -f2-)"
            DOWNLOAD_SERVER=$PROTO$HOST
        fi
        [ "$DEBUG" == "1" ] && echo "Processing package: $PACKAGE"
        if [[ $(basename $PACKAGE) == ubuntu* ]] \
            || [[ $(basename $PACKAGE) == version* ]]\
            || [[ ( $(basename $PACKAGE) == device* ) && ( "$DOWNLOAD_DEVICE" == "1" ) ]]; then
            download_file $DOWNLOAD_SERVER/$PACKAGE $UDF_DOWNLOAD_CACHE/$PACKAGE $SIZE
            DOWNLOADED_ROOTFS_PACKAGES+="$UDF_DOWNLOAD_CACHE/$PACKAGE "
        elif [[ $(basename $PACKAGE) == custom* ]]; then
            if [ -n "$UBUNTU_CUSTOM_PACKAGES"  ]; then
                DOWNLOADED_CUSTOM_PACKAGES+="$UBUNTU_CUSTOM_PACKAGES "
            else
                download_file $DOWNLOAD_SERVER/$PACKAGE $UDF_DOWNLOAD_CACHE/$PACKAGE $SIZE
                DOWNLOADED_CUSTOM_PACKAGES+="$UDF_DOWNLOAD_CACHE/$PACKAGE "
            fi
        fi
    done <<< "$CHANNEL_PACKAGES"
    echo -e ""
}

# Parse parameters
unset VERSION
unset DOWNLOAD_DEVICE
while [ -n "$1" ];
do
    if [[ $1 == "-h" || $1 == "--help" ]]; then
        print_usage
        return
    elif [[ "$1" == "-v" || "$1"  == "--version" ]]; then
        shift
        # is the value number or channel?
        if [ "$1" -eq "$1" ] 2>/dev/null; then
            VERSION=$1
            echo "Looking for version $VERSION"
        else
            echo "Passed version is not number"
            print_usage
            return
        fi
    elif [[ "$1" == "-c" || "$1" == "--channel" ]]; then
        shift
        USING_CHANNEL=$1
        [ "$DEBUG" == "1" ] && echo "Using release channel $USING_CHANNEL"
    elif [[ "$1" == "-d" || "$1" == "--device" ]]; then
        shift
        [ "$DEBUG" == "1" ] && echo "Using device $1"
        USING_DEVICE=$1
    elif [[ "$1" == "--full" ]]; then
        DOWNLOAD_DEVICE="1"
    else
        echo "Unknown parameter: $1"
        echo "Use -h to show help"
        return
    fi
    shift
done

echo -e "Channel is set to: $USING_CHANNEL\n\n"
[ -z $VERSION ] && echo "Looking for latest release"

# get channel packages
unset CHANNEL_PACKAGES
download_channel $USING_CHANNEL $USING_DEVICE $VERSION
unset USING_CHANNEL

if [ -z "$CHANNEL_PACKAGES" ]; then
    echo "check version and channel and try again"
    return
fi

# prepare exports for build
# Arale has one system partition for rootfs,custom and version
unset UBUNTU_ROOTFS_PACKAGES
export UBUNTU_ROOTFS_PACKAGES="$DOWNLOADED_ROOTFS_PACKAGES $DOWNLOADED_CUSTOM_PACKAGES"
if [ -n "$ROOTFS_PACKAGES" ]; then
    echo "export UBUNTU_ROOTFS_PACKAGES=\"$UBUNTU_ROOTFS_PACKAGES\"" > $ROOTFS_PACKAGES
fi
echo "UBUNTU_ROOTFS_PACKAGES=\"${UBUNTU_ROOTFS_PACKAGES}\""
echo -e "\nUbuntu packages are prepared for build\n"

